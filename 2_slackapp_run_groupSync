#lambda_function.py

import boto3
import os
import json
import requests

SLACK_CHANNEL_ID = "xxxxxx"

HEADERS = {
    'Accept': 'application/json',
    'Content-type': 'application/json',
}

MONITOR_BUCKET = os.environ['MONITOR_BUCKET'] 

def lambda_handler(event, context):
    data_from_slack = event["Records"][0]["Sns"]["Message"]

    json_loaded_data = json.loads(data_from_slack)

    response_url = json_loaded_data["response_url"]
    channel_id = json_loaded_data["channel_id"]

    search_handler(channel_id, response_url)


def search_handler(channel_id, response_url):
    response_json = {}

    # Verify that the request is coming from the right slack channel
    if (channel_id == SLACK_CHANNEL_ID):
        runGroupSync(response_url)
    else:
        response_text = ":warning: You must use `/retry` while inside an authorized channel."
        response_json["text"] = response_text
        response = requests.post(
            response_url, data=json.dumps(response_json),
            headers={'Content-Type': 'application/json'}
        )

def runGroupSync(response_url): 
    response_json = {}
    
    s3 = boto3.client('s3', endpoint_url=os.environ['S3_ENDPOINT']) 
    resp = s3.get_object(Bucket=MONITOR_BUCKET, Key="groups_config.txt") 
    file_content = resp['Body'].read().decode('utf-8') 
    json_content = json.loads(file_content) 
    
    blocks = [ 
        {
            "type": "header", 
            "text": {        
                "type": "plain_text", 
                "text": "Sync Categories" 
            } 
        }, 
        { 
            "type": "divider" 
            
        } 
    ] 
    
    for key in json_content.keys():
        new_block = {
            "type": "section",
            "text": {"type": "mrkdwn","text": key },
			 "accessory": {
				"type": "static_select",
				"placeholder": {
					"type": "plain_text",
					"emoji": True,
					"text": "Select Action"
				},
				"options": [
					{
						"text": {
							"type": "plain_text",
							"emoji": True,
							"text": "View Sync Groups in " + key
						},
						"value": "View " + key
					},
					{
						"text": {
							"type": "plain_text",
							"emoji": True,
							"text": "Add Sync Groups in " + key
						},
						"value": "Add " + key
					},
					{
						"text": {
							"type": "plain_text",
							"emoji": True,
							"text": "Remove Sync Groups from " + key
						},
						"value": "Remove " + key
					}
				]
			}
        }
        
        blocks.append(new_block)
    
    response_json['blocks'] = blocks
    # TODO implement 
    

    response = requests.post(
        response_url, data=json.dumps(response_json),
        headers={'Content-Type': 'application/json'}
        )


